/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type EventRule struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventRuleSpec   `json:"spec,omitempty"`
	Status            EventRuleStatus `json:"status,omitempty"`
}

type EventRuleSpecActionsAnnotate struct {
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type EventRuleSpecActionsEventAction struct {
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type EventRuleSpecActionsExtractions struct {
	// +optional
	Regex *string `json:"regex,omitempty" tf:"regex"`
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// +optional
	Target *string `json:"target,omitempty" tf:"target"`
	// +optional
	Template *string `json:"template,omitempty" tf:"template"`
}

type EventRuleSpecActionsPriority struct {
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type EventRuleSpecActionsSeverity struct {
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type EventRuleSpecActionsSuppress struct {
	// +optional
	ThresholdTimeAmount *int64 `json:"thresholdTimeAmount,omitempty" tf:"threshold_time_amount"`
	// +optional
	ThresholdTimeUnit *string `json:"thresholdTimeUnit,omitempty" tf:"threshold_time_unit"`
	// +optional
	ThresholdValue *int64 `json:"thresholdValue,omitempty" tf:"threshold_value"`
	// +optional
	Value *bool `json:"value,omitempty" tf:"value"`
}

type EventRuleSpecActionsSuspend struct {
	// +optional
	Value *int64 `json:"value,omitempty" tf:"value"`
}

type EventRuleSpecActions struct {
	// +optional
	Annotate []EventRuleSpecActionsAnnotate `json:"annotate,omitempty" tf:"annotate"`
	// +optional
	EventAction []EventRuleSpecActionsEventAction `json:"eventAction,omitempty" tf:"event_action"`
	// +optional
	Extractions []EventRuleSpecActionsExtractions `json:"extractions,omitempty" tf:"extractions"`
	// +optional
	Priority []EventRuleSpecActionsPriority `json:"priority,omitempty" tf:"priority"`
	// +optional
	Severity []EventRuleSpecActionsSeverity `json:"severity,omitempty" tf:"severity"`
	// +optional
	Suppress []EventRuleSpecActionsSuppress `json:"suppress,omitempty" tf:"suppress"`
	// +optional
	Suspend []EventRuleSpecActionsSuspend `json:"suspend,omitempty" tf:"suspend"`
}

type EventRuleSpecConditionsSubconditionsParameter struct {
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type EventRuleSpecConditionsSubconditions struct {
	// +optional
	Operator *string `json:"operator,omitempty" tf:"operator"`
	// +optional
	Parameter []EventRuleSpecConditionsSubconditionsParameter `json:"parameter,omitempty" tf:"parameter"`
}

type EventRuleSpecConditions struct {
	// +optional
	Operator *string `json:"operator,omitempty" tf:"operator"`
	// +optional
	Subconditions []EventRuleSpecConditionsSubconditions `json:"subconditions,omitempty" tf:"subconditions"`
}

type EventRuleSpecTimeFrameActiveBetween struct {
	// +optional
	EndTime *int64 `json:"endTime,omitempty" tf:"end_time"`
	// +optional
	StartTime *int64 `json:"startTime,omitempty" tf:"start_time"`
}

type EventRuleSpecTimeFrameScheduledWeekly struct {
	// +optional
	Duration *int64 `json:"duration,omitempty" tf:"duration"`
	// +optional
	StartTime *int64 `json:"startTime,omitempty" tf:"start_time"`
	// +optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone"`
	// +optional
	Weekdays []int64 `json:"weekdays,omitempty" tf:"weekdays"`
}

type EventRuleSpecTimeFrame struct {
	// +optional
	ActiveBetween []EventRuleSpecTimeFrameActiveBetween `json:"activeBetween,omitempty" tf:"active_between"`
	// +optional
	ScheduledWeekly []EventRuleSpecTimeFrameScheduledWeekly `json:"scheduledWeekly,omitempty" tf:"scheduled_weekly"`
}

type EventRuleSpecVariableParameters struct {
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type EventRuleSpecVariable struct {
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Parameters []EventRuleSpecVariableParameters `json:"parameters,omitempty" tf:"parameters"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type EventRuleSpec struct {
	State *EventRuleSpecResource `json:"state,omitempty" tf:"-"`

	Resource EventRuleSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type EventRuleSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Actions *EventRuleSpecActions `json:"actions,omitempty" tf:"actions"`
	// +optional
	Conditions *EventRuleSpecConditions `json:"conditions,omitempty" tf:"conditions"`
	// +optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled"`
	// +optional
	Position *int64  `json:"position,omitempty" tf:"position"`
	Service  *string `json:"service" tf:"service"`
	// +optional
	TimeFrame *EventRuleSpecTimeFrame `json:"timeFrame,omitempty" tf:"time_frame"`
	// +optional
	Variable []EventRuleSpecVariable `json:"variable,omitempty" tf:"variable"`
}

type EventRuleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// EventRuleList is a list of EventRules
type EventRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of EventRule CRD objects
	Items []EventRule `json:"items,omitempty"`
}
