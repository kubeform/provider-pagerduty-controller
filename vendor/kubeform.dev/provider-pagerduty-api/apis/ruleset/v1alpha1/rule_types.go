/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Rule struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleSpec   `json:"spec,omitempty"`
	Status            RuleStatus `json:"status,omitempty"`
}

type RuleSpecActionsAnnotate struct {
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type RuleSpecActionsEventAction struct {
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type RuleSpecActionsExtractions struct {
	// +optional
	Regex *string `json:"regex,omitempty" tf:"regex"`
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// +optional
	Target *string `json:"target,omitempty" tf:"target"`
	// +optional
	Template *string `json:"template,omitempty" tf:"template"`
}

type RuleSpecActionsPriority struct {
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type RuleSpecActionsRoute struct {
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type RuleSpecActionsSeverity struct {
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type RuleSpecActionsSuppress struct {
	// +optional
	ThresholdTimeAmount *int64 `json:"thresholdTimeAmount,omitempty" tf:"threshold_time_amount"`
	// +optional
	ThresholdTimeUnit *string `json:"thresholdTimeUnit,omitempty" tf:"threshold_time_unit"`
	// +optional
	ThresholdValue *int64 `json:"thresholdValue,omitempty" tf:"threshold_value"`
	// +optional
	Value *bool `json:"value,omitempty" tf:"value"`
}

type RuleSpecActionsSuspend struct {
	// +optional
	Value *int64 `json:"value,omitempty" tf:"value"`
}

type RuleSpecActions struct {
	// +optional
	Annotate []RuleSpecActionsAnnotate `json:"annotate,omitempty" tf:"annotate"`
	// +optional
	EventAction []RuleSpecActionsEventAction `json:"eventAction,omitempty" tf:"event_action"`
	// +optional
	Extractions []RuleSpecActionsExtractions `json:"extractions,omitempty" tf:"extractions"`
	// +optional
	Priority []RuleSpecActionsPriority `json:"priority,omitempty" tf:"priority"`
	// +optional
	Route []RuleSpecActionsRoute `json:"route,omitempty" tf:"route"`
	// +optional
	Severity []RuleSpecActionsSeverity `json:"severity,omitempty" tf:"severity"`
	// +optional
	Suppress []RuleSpecActionsSuppress `json:"suppress,omitempty" tf:"suppress"`
	// +optional
	Suspend []RuleSpecActionsSuspend `json:"suspend,omitempty" tf:"suspend"`
}

type RuleSpecConditionsSubconditionsParameter struct {
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type RuleSpecConditionsSubconditions struct {
	// +optional
	Operator *string `json:"operator,omitempty" tf:"operator"`
	// +optional
	Parameter []RuleSpecConditionsSubconditionsParameter `json:"parameter,omitempty" tf:"parameter"`
}

type RuleSpecConditions struct {
	// +optional
	Operator *string `json:"operator,omitempty" tf:"operator"`
	// +optional
	Subconditions []RuleSpecConditionsSubconditions `json:"subconditions,omitempty" tf:"subconditions"`
}

type RuleSpecTimeFrameActiveBetween struct {
	// +optional
	EndTime *int64 `json:"endTime,omitempty" tf:"end_time"`
	// +optional
	StartTime *int64 `json:"startTime,omitempty" tf:"start_time"`
}

type RuleSpecTimeFrameScheduledWeekly struct {
	// +optional
	Duration *int64 `json:"duration,omitempty" tf:"duration"`
	// +optional
	StartTime *int64 `json:"startTime,omitempty" tf:"start_time"`
	// +optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone"`
	// +optional
	Weekdays []int64 `json:"weekdays,omitempty" tf:"weekdays"`
}

type RuleSpecTimeFrame struct {
	// +optional
	ActiveBetween []RuleSpecTimeFrameActiveBetween `json:"activeBetween,omitempty" tf:"active_between"`
	// +optional
	ScheduledWeekly []RuleSpecTimeFrameScheduledWeekly `json:"scheduledWeekly,omitempty" tf:"scheduled_weekly"`
}

type RuleSpecVariableParameters struct {
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type RuleSpecVariable struct {
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Parameters []RuleSpecVariableParameters `json:"parameters,omitempty" tf:"parameters"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type RuleSpec struct {
	State *RuleSpecResource `json:"state,omitempty" tf:"-"`

	Resource RuleSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type RuleSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Actions *RuleSpecActions `json:"actions,omitempty" tf:"actions"`
	// +optional
	Conditions *RuleSpecConditions `json:"conditions,omitempty" tf:"conditions"`
	// +optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled"`
	// +optional
	Position *int64  `json:"position,omitempty" tf:"position"`
	Ruleset  *string `json:"ruleset" tf:"ruleset"`
	// +optional
	TimeFrame *RuleSpecTimeFrame `json:"timeFrame,omitempty" tf:"time_frame"`
	// +optional
	Variable []RuleSpecVariable `json:"variable,omitempty" tf:"variable"`
}

type RuleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RuleList is a list of Rules
type RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Rule CRD objects
	Items []Rule `json:"items,omitempty"`
}
